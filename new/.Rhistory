library(lmtest)
library(igraph)
library(numbers)
library(rlist)
library(ggplot2)
library(Hmisc)
library(zoo)
setwd(dirname(getActiveDocumentContext()$path))
#GET DATA
brokers <-read.csv('../shared/new/combined/brokers.csv')
insurers<-read.csv('../shared/new/combined/insurers.csv')
banks <-read.csv('../shared/new/combined/banks.csv')
hf<-read.csv('../shared/new/combined/hf.csv')
df<-read.csv('../shared/new/combined/combined.csv')
df<-df %>%
rename(
dates=X
)
df$dates<-as.Date(df$dates, "%d.%m.%Y")
#DATA SUMMARY
#J1994-1, j96-865, j99 - 2161, j02 - 3457, j06 - 5185,
starts <- list(j94 = 1, j96 =865, j99=2161, j02=3457, j06=5185)
mySummary<-function(vector, na.rm=FALSE){
return(c(summary(vector, digits=2), 'Std. Dev' = round(sd(vector, na.rm=TRUE), 2),
'Skew' = round(skewness(vector, na.rm=TRUE), 2),
'kurtosis' =round(kurtosis(vector, na.rm=TRUE), 2),
'autocorrelation' = round(acf(vector, na.action=na.pass)$acf[2], 2)))
}
produceSummary <- function (frame, title, output ){
#frame<-df #change the df to get new table
v<- 12*unname(unlist(frame[,2:ncol(frame)]))
repeatTimes <- 25*(nrow(frame))
brok <-rep(c('brokers'), repeatTimes)
insur<-rep(c('insurers'), repeatTimes)
bank<-rep(c('banks'), repeatTimes)
hedg<-rep(c('hedge funds'), repeatTimes)
classification<- c(brok, insur, bank, hedg)
s<-aggregate(v, list(classification), mySummary)
s<- cbind(s[-ncol(s)], s[[ncol(s)]])
#s<- aggregate(v, list(classification), mySummary)
#mat<-do.call("cbind", s[[2]])
names(s)[names(s) == 'Group.1'] <- 'type'
stargazer(s, digits = 2, summary=FALSE, rownames=FALSE, out=paste("images/", output, ".tex", sep=""), title = title)
}
produceSummary(df, "Full sample", "fullsample")
produceSummary(df[starts$j94:(starts$j94+35),], "January 1994-December 1996", "j94")
produceSummary(df[starts$j96:(starts$j96+35),], "January 1996-December 1998", "j96")
produceSummary(df[starts$j99:(starts$j99+35),], "January 1999-December 2001", "j99")
produceSummary(df[starts$j02:(starts$j02+35),], "January 2002-December 2004", "j02")
produceSummary(df[starts$j06:(starts$j06+35),], "January 2006-December 2008", "j06")
brokermeans <-c()
insurermeans<-c()
bankmeans<-c()
hfmeans<-c()
windowAve <- c()
windowNames <-c()
#as.Date(df[:, 1]
for (i in seq(1,nrow(df), 36)){
frame<-df[i:(i+35), ]
windowAve <- c(windowAve, mean(unlist(frame[, 2:ncol(frame)])))
brokermeans<-c(brokermeans, mean(unlist(frame[,2:26])))
insurermeans<-c(insurermeans, mean(unlist(frame[, 27:51])))
bankmeans<-c(bankmeans, mean(unlist(frame[, 52:76])))
hfmeans<-c(hfmeans, mean(unlist(frame[, 77:101])))
windowNames<-c(windowNames, df[i+35,1] )
}
plot(as.Date(windowNames), windowAve, type='lines')
lines(as.Date(windowNames), brokermeans, col='red')
lines(as.Date(windowNames), insurermeans, col='blue')
lines(as.Date(windowNames), hfmeans, col='grey')
lines(as.Date(windowNames), bankmeans, col='brown')
plot(as.Date(windowNames), windowAve, type='lines')
#GARCH
windowAve <- c()
windowNames <-c()
for (i in seq(1,nrow(df), 36)){
windowAve <- c(windowAve, mean(unlist(df[i:(i+35), 2:ncol(df) ])))
windowNames<-c(windowNames, df[i+35,1] )
}
#windowAve <-rowMeans(df[, 2:ncol(df)])
sum(is.na(windowAve))
#windowNames <-df[37:nrow(df), 1]
#names(windowAve)<-windowNames
mod<-garch(windowAve, order=c(1,1))
summary(mod)
plot(mod)
#GARCH on their sample
modPartial<-garch(windowAve[1:145])
my2.ts <- zoo(modPartial$fitted.values[,1]^2, as.Date(windowNames[1:145]))
plot(my2.ts, type='lines', xlab='year', ylab='variance', main='Variance from GARCH(1,1)', yaxt='n', xaxt='n' )
axis.Date(1, at=seq(as.Date("1994/1/1"), as.Date("2018/1/1"), by = "year"))
axis(2,at=0)
#Full Garch with no averaging
windowAve <- c()
windowNames <-c()
for (i in seq(1,nrow(df), 36)){
windowAve <- c(windowAve, mean(unlist(df[i, 2:ncol(df) ])))
windowNames<-c(windowNames, df[i,1] )
}
mod<-garch(windowAve)
my.ts <-zoo(mod$fitted.values[,1]^2, as.Date(windowNames))
plot(my.ts, type='lines', xlab='year', ylab='variance', main='Variance from GARCH(1,1) (1994-2015)', yaxt='n', xaxt='n' )
axis.Date(1, at=seq(as.Date("1994/1/1"), as.Date("2018/1/1"), by = "year"))
#axis(1, at=seq(as.Date("1994/1/1"), as.Date("2018/1/1"), by = "year"))
axis(2, at=0)
#garch on their sample with no averaging
modPartial<-garch(windowAve[1:(145+24+12)])
my2.ts <- zoo(modPartial$fitted.values[24:(145+24+12),1]^2, as.Date(windowNames[24:(145+24+12)]))
plot(my2.ts, type='lines', xlab='year', ylab='variance', main='Variance from GARCH(1,1) (1996-2008)', yaxt='n', xaxt='n' )
axis.Date(1, at=seq(as.Date("1994/1/1"), as.Date("2018/1/1"), by = "year"))
axis(2,at=0)
summary(modPartial)
#with log transformation
windowAve <- c()
windowNames <-c()
for (i in seq(1,nrow(df), 36)){
windowAve <- c(windowAve, mean(unlist(log(1+df[i, 2:ncol(df) ]))))
windowNames<-c(windowNames, df[i,1] )
}
modPartial<-garch(windowAve[1:(145+24+12)])
summary(modPartial)
my2.ts <- zoo(modPartial$fitted.values[24:(145+24+12),1]^2, as.Date(windowNames[24:(145+24+12)]))
plot(my2.ts, type='lines', xlab='year', ylab='variance', main='Variance from GARCH(1,1) with log transformation (1996-2008)', yaxt='n', xaxt='n' )
#PCA
nonNans <- c()
firsts<-c()
twoToTen<-c()
elevenToTwenty<-c()
rest<-c()
for(i in seq(1,nrow(df), 36)) {
pca <- df[i:(i+35),2:ncol(df)]
pca<-pca[,colSums(is.na(pca))==0]
print(i)
nonNans<-c(nonNans, length(pca))
pca.pca<-prcomp(pca, center=TRUE, scale.=TRUE)
x<-cumsum(pca.pca$sdev^2/sum(pca.pca$sdev^2))
firsts<-c(firsts, x[1])
twoToTen<-c(twoToTen, x[10]-x[1])
elevenToTwenty<-c(elevenToTwenty, x[20]-x[10])
rest<-c(rest, x[36]-x[20])
}
plot(df$dates[seq(36, nrow(df), 36)], firsts, type='lines')
pca<-data.frame('dates'= df$dates[seq(36, nrow(df), 36)], "PC1"= firsts, "PC2"=twoToTen+firsts, "PC11_20" = elevenToTwenty+twoToTen+firsts, "PC21_36" = elevenToTwenty+twoToTen+firsts+rest )
plot(pca$dates, pca$PC1, type='l', ylim=range(c(0,1)), xlab='', ylab = 'proportion explained', main = 'PCA component proportion explained')
lines(pca$dates, pca$PC2, col='red')
lines(pca$dates, pca$PC11_20, col='blue')
legend('bottomright', c('PC1', 'PC2-10', 'PC11-20'), lty=1, col=c('black', 'red', 'blue'), bty='n', cex=.75)
#GRANGER CAUSALITY
#startIndex = 1+36*12
startIndex = 1
endIndex = startIndex+35
brokers_shared <- df[startIndex:endIndex, c(1,2:26)]
ins_shared <- df[startIndex:endIndex, c(1,27:51)]
banks_shared <- df[startIndex:endIndex, c(1,52:76)]
hf_shared <- df[startIndex:endIndex, c(1,77:101)]
merged <- merge(merge(merge(brokers_shared, ins_shared), banks_shared), hf_shared)
grangerDF<- data.frame(matrix(nrow=ncol(merged)-1, ncol = ncol(merged)-1)) #this frame indicates whether two variables granger cause each other
rownames(grangerDF)<-colnames(merged)[2:ncol(merged)]
colnames(grangerDF)<-colnames(merged)[2:ncol(merged)]
for (i in 2:ncol(merged)){
for (j in 2:ncol(merged)) {
if(i!=j) {
x<-merged[1:nrow(merged), i]
y<-merged[1:nrow(merged), j]
granger <-grangertest(x, y,order=1)
p_value<-granger$`Pr(>F)`[2] #null is that there is no causality. So if p-value is small we get causality.
grangerDF[i-1,j-1] = p_value
}
}
print(i)
}
sum(grangerDF<0.05, na.rm=TRUE)
significance = 0.05 #change this to change significance level
nInSample  = 25 #CHANGE THIS LINE (SHOULD EQUAL NUMBER OF INSTITUTIONS IN THE GROUP)
groupVector  = vector(length = nInSample*4)
for (i in 0:(nInSample*4-1)) {
groupVector[i+1] = as.integer(i/nInSample)+1
}
mergedTemp <- (grangerDF<significance)*1 #matrix(sample(0:1, (nInSample*4)^2, replace=TRUE, prob=c(0.9,0.1)), nc=nInSample*4) #CHANGE THIS LINE FOR MY DATAFRAME
print(mergedTemp)
g1<-graph_from_adjacency_matrix(mergedTemp)
G_Grouped = g1
E(G_Grouped)$weight = 1
for(i in unique(groupVector)) {
GroupV = which(groupVector == i)
G_Grouped = add_edges(G_Grouped, combn(GroupV, 2), attr=list(weight=5))
}
#set.seed(567)
LO = layout_with_fr(G_Grouped)
plot.igraph(g1,  vertex.color = rainbow(4, alpha=0.4)[groupVector], layout=LO, vertex.label=NA, vertex.size=5,arrow.size=0.01, arrow.width=0.1, curved=TRUE, edge.arrow.size=0.3)
legend('topleft', c('broker', 'insurer', 'bank', 'hedge fund'), lty=1, col=rainbow(4, alpha=0.4), bty='n', cex=.75, pch=15)
#write.csv( grangerDF, "temp/graph06.csv")
saveLayout <- LO
#SEE HOW COMPOSITION CHANGES
getEntities <- function (path) {
res <-matrix(nrow = 0, ncol=26)
for (i in 1:(length(excel_sheets(path)))){
if(mod(i,10)==0){
print(i)
}
res<-rbind(res,names(read_excel(path, sheet = i)))
}
return (res)
}
hfComp<- getEntities("../shared/new/hf_result.xlsx")
brokerComp<-getEntities("../shared/new/PB_Monthly_Rolling_Large_Returns_3_years.xlsx")
banksComp<-getEntities("../shared/new/BA_Monthly_Rolling_Large_Returns_3_years.xlsx")
insurerComp<-getEntities("../shared/new/INS_Monthly_Rolling_Large_Returns_3_years.xlsx")
combined<-list(hfComp, brokerComp, banksComp, insurerComp)
datesComp <- c(as.Date("1994-01-31"))
for (j in 1:252) {
datesComp <- c(datesComp, as.Date("1994-01-31") %m+% months(j))
}
for (fr in combined) {
print(length(fr))
#fr[,1] = datesComp
}
hfComp[,1] <- as.Date(datesComp)
brokerComp[,1] <- as.Date(datesComp)
banksComp[,1]<-as.Date(datesComp)
insurerComp[,1]<-as.Date(datesComp)
symdiff <- function( x, y) { setdiff( union(x, y), intersect(x, y))}
findDiff <- function(fr) {
differences<-c()
for (i in 1:252) {
differences <- c(differences, length(symdiff(fr[i, 2:ncol(fr)],fr[i+1, 2:ncol(fr)])))
}
return (differences)
}
hfComp.ts <- xts(findDiff(hfComp), order.by=as.Date(datesComp[2:length(datesComp)]))
brokerComp.ts <- xts(findDiff(brokerComp), order.by=as.Date(datesComp[2:length(datesComp)]))
banksComp.ts <- xts(findDiff(banksComp), order.by=as.Date(datesComp[2:length(datesComp)]))
insurerComp.ts <- xts(findDiff(insurerComp), order.by=as.Date(datesComp[2:length(datesComp)]))
basket<-cbind(hfComp.ts, brokerComp.ts, banksComp.ts, insurerComp.ts)
basket.zoo <- as.zoo(basket)
basket["2006-02-28",'brokerComp.ts']<-0
basket["2006-02-28",'banksComp.ts']<-0
basket["2006-02-28",'insurerComp.ts']<-0
plot(index(basket), rowSums(basket), type="l", main = 'change in sample' )
View(hfComp)
hfcomp
hfComp
hfComp[1:endValue, 2:ncol(hfComp)]
endValue<-5
hfComp[1:endValue, 2:ncol(hfComp)]
flatten(hfComp)
install.packages('ramify')
library(ramify)
flatten(hfComp)
length(flatten(hfComp))
length(hfComp[1:endValue, 2:ncol(hfComp)])
table(hfComp[1:endValue, 2:ncol(hfComp)])
astype(table(hfComp[1:endValue, 2:ncol(hfComp)]))
typeof(table(hfComp[1:endValue, 2:ncol(hfComp)]))
t<-(table(hfComp[1:endValue, 2:ncol(hfComp)])
t<-table(hfComp[1:endValue, 2:ncol(hfComp)])
hfComp
t<-table(flatten(hfComp[1:endValue, 2:ncol(hfComp)]))
(flatten(hfComp[1:endValue, 2:ncol(hfComp)])
sad
(flatten(hfComp[1:endValue, 2:ncol(hfComp)]))
t<-table(flatten(hfComp[1:endValue, 2:ncol(hfComp)]))
t==5
t[t==5]
names(t[t==5])
endValue<-12*22
t<-table(flatten(hfComp[1:endValue, 2:ncol(hfComp)]))
names(t[t==5])
endValue<-12*12
t<-table(flatten(hfComp[1:endValue, 2:ncol(hfComp)]))
names(t[t==5])
View(df)
length(df)
nrow(df)
length(datesComp)
xts(bankmeans, order.by=as.Date(datesComp[1:length(datesComp)]))
bankmeans.ts<-xts(bankmeans, order.by=as.Date(datesComp[1:length(datesComp)]))
brokermeans.ts<-xts(brokermeans, order.by=as.Date(datesComp[1:length(datesComp)]))
insurermeans.ts<-xts(insurermeans, order.by=as.Date(datesComp[1:length(datesComp)]))
hfmeans.ts<-xts(hfmeans, order.by=as.Date(datesComp[1:length(datesComp)]))
cbind(c(2,3), c(4,5))
meanBasket<-cbind(bankmeans, brokermeans, insurermeans, hfmeans)
plot(meanBasket)
meanBasket<-cbind(bankmeans.ts, brokermeans.ts, insurermeans.ts, hfmeans.ts)
plot(meanBasket)
legend()
addlegend()
install.packages('TTR')
library('TTR')
addlegend()
addLegend()
plot.xts(meanBasket)
plot.xts(meanBasket, auto.legend=TRUE)
plot.xts(meanBasket, auto.legend=TRUE)
install.packages("xtsExtra")
library("xtsExtra")
install.packages("xtsExtra", repos="http://R-Forge.R-project.org")
plot(read.zoo(meanBasket), auto.legend=TRUE)
plot(as.zoo(meanBasket), auto.legend=TRUE)
plot(as.zoo(meanBasket), auto.legend=TRUE, screen=1)
autoplot(as.zoo(meanBasket), facet = NULL)
install.packages('vars')
library(vars)
meanBasket[1:10]
meanBasket[i:i+36]
meanBasket[i:(i+36)]
Acf(meanBasket, lag.max = 12, type = c("correlation", "covariance", "partial"), plot = TRUE, na.action = na.contiguous, demean = TRUE)
install.packages('forecast')
library(forecast)
Acf(meanBasket, lag.max = 12, type = c("correlation", "covariance", "partial"), plot = TRUE, na.action = na.contiguous, demean = TRUE)
Acf(meanBasket, lag.max = 12, plot = TRUE, na.action = na.contiguous, demean = TRUE)
Acf(meanBasket, lag.max =24, plot = TRUE, na.action = na.contiguous, demean = TRUE)
pl <- autoplot(as.zoo(meanBasket), facet = NULL)
p + theme_bw()
pl + theme_bw()
adf.test(meanBasket)
names(meanBasket)
adf.test(bankmeans.ts)
adf.test(meanBasket$bankmeans.ts)
adf.test(meanBasket$brokermeans.ts)
adf.test(meanBasket$hfmeans.ts)
adf.test(meanBasket$brokermeans.ts)
adf.test(meanBasket$insurermeans.ts)
adf.test(meanBasket$hfmeans.ts)
meanBasket[/"2008-01-01"]
typeof(meanBasket)
meanBasket
meanBasket<-cbind(bankmeans.ts, brokermeans.ts, insurermeans.ts, hfmeans.ts)
typeof(meanBasket)
View(meanBasket)
meanBasket["/2008-01-01"]
install.package('strucchange')
install.packages('strucchange')
library(strucchange)
breakpoints(meanBasket$hfmeans.ts~1, h=0.1)
summary(breakP)
breakP <-breakpoints(meanBasket$hfmeans.ts~1, h=0.1)
summary(breakP)
plot(breakP)
meanBasket$hfmeans.ts
breakP <-breakpoints(hfmeans.ts~1, h=0.1, data=meanBasket)
names(meanBasket)
meanBasket
f<-Fstats(meanBasket$hfmeans.ts)
f<-Fstats(meanBasket$hfmeans.ts~1)
meanBasket$hfmeans.ts
is.na(meanBasket$hfmeans.ts)
sum(is.na(meanBasket$hfmeans.ts))
typeof(meanBasket$hfmeans.ts)
f<-Fstats(meanBasket$hfmeans.ts~1)
f<-Fstats(meanBasket$hfmeans.ts~1, from=0.15, to=0.85)
vector(meanBasket$hfmeans.ts)
f<-Fstats(as.zoo(meanBasket$hfmeans.ts)~1, from=0.15, to=0.85)
plot(f)
f<-Fstats(as.zoo(meanBasket$hfmeans.ts)~1, from=c(2000,5), to=c(2008,5))
f<-Fstats(as.zoo(meanBasket$hfmeans.ts)~1, from=as.Date(c(2000,5)), to=as.Date(c(2008,5)))
f<-Fstats(as.zoo(meanBasket$hfmeans.ts)~1, start=c(2000,5), end=c(2008,5)))
f<-Fstats(as.zoo(meanBasket$hfmeans.ts)~1, start=c(2000,5), end=c(2008,5))
f<-Fstats(as.zoo(meanBasket$hfmeans.ts)~1, from=c(2000,5), to=c(2008,5))
f<-Fstats(as.ts(meanBasket$hfmeans.ts)~1, from=c(2000,5), to=c(2008,5))
as.ts(meanBasket$hfmeans.ts)
t<-as.ts(meanBasket$hfmeans.ts,from = C(1994,1))
t<-as.ts(meanBasket$hfmeans.ts,from = C(1994,1))
t<-as.ts(meanBasket$hfmeans.ts,begin = C(1994,1))
t<-ts(meanBasket$hfmeans.ts,begin = C(1994,1))
t<-ts(meanBasket$hfmeans.ts,start= C(1994,1))
t<-ts(meanBasket$hfmeans.ts,start= c(1994,1))
t<-ts(meanBasket$hfmeans.ts,start= c(1994,1))
t
View(bankmeans.ts)
t<-ts(meanBasket$hfmeans.ts,start= c(1994,1), end=c(2015,1))
t
t<-ts(meanBasket$hfmeans.ts,start= c(1994,1), end=c(2015,1), frequency =12)
t
f<-Fstats(as.ts(meanBasket$hfmeans.ts)~1, from=c(2000,5), to=c(2008,5))
f<-Fstats(t~1, from=c(2000,5), to=c(2008,5))
plot(f)
summary(F)
summary(F)
source('~/Gleb/time series/time-series/data/new/newCode.R', echo=TRUE)
summary(f)
breaks<-breakpoints(t)
breaks<-breakpoints(t~1)
summary(breaks)
plot(breakP)
plot(f)
plot(t)
lines(fitted(breaaks, breaks = 5), col = 4)
lines(fitted(breaks, breaks = 5), col = 4)
lines(fitted(breaks, breaks = 2), col = 4)
lines(fitted(breaks, breaks = 2), col = 2)
plot(t)
lines(fitted(breaks, breaks = 2), col = 2)
f<-Fstats(t~1, from=c(2002,5), to=c(2008,5))
plot(f)
plot(f, name = "as")
plot(f, main= "F tests for structural break")
plot(f, main= "F tests for structural break for HF")
lines(boundary(f, pval=TRUE, alpha=0.05))
f<-Fstats(t~1, from=c(2002,5), to=c(2008,5))
plot(f, pval=True, alpha=0.05, main= "F tests for structural break for HF")
lines(boundary(f, pval=TRUE, alpha=0.05))
plot(f, pval=TRUE, alpha=0.05, main= "F tests for structural break for HF")
f<-Fstats(t~1, from=c(2002,5), to=c(2008,5))
plot(f, pval=TRUE, alpha=0.05, main= "F tests for structural break for HF")
lines(boundary(f, pval=TRUE, alpha=0.05))
boundary(f)
boundary(f, alpha=0.05)
summary(boundary(f, alpha=0.05))
View(brokers)
df[i]
df[i, ]
var(C(1,2,3))
var(c(1,2,3))
totalVar<-c()
brokerVar<-c()
insurerVar<-c()
hfVar<-c()
for (i in seq(1,nrow(df), 36)){
frame<-df[i:(i+35), ]
totalVar <- c(totalVar, var(unlist(frame[, 2:ncol(frame)])))
brokerVar<-c(brokerVar, var(unlist(frame[,2:26])))
insurerVar<-c(insurerVar, var(unlist(frame[, 27:51])))
bankVar<-c(bankVar, var(unlist(frame[, 52:76])))
hfVar<-c(hfVar, var(unlist(frame[, 77:101])))
#windowNames<-c(windowNames, df[i+35,1] )
}
totalVar<-c()
bankVar<-c()
brokerVar<-c()
insurerVar<-c()
hfVar<-c()
for (i in seq(1,nrow(df), 36)){
frame<-df[i:(i+35), ]
totalVar <- c(totalVar, var(unlist(frame[, 2:ncol(frame)])))
brokerVar<-c(brokerVar, var(unlist(frame[,2:26])))
insurerVar<-c(insurerVar, var(unlist(frame[, 27:51])))
bankVar<-c(bankVar, var(unlist(frame[, 52:76])))
hfVar<-c(hfVar, var(unlist(frame[, 77:101])))
#windowNames<-c(windowNames, df[i+35,1] )
}
ggplot(windowNames, aes(totalVar))
ggplot(mapping =  aes(windowNames ,totalVar))
ggplot(mapping =  aes(as.Date(windowNames) ,totalVar))
totalVar
plot(as.Date(windowNames) ,totalVar)
plot(as.Date(windowNames) ,totalVar, type ="l")
lines(as.Date(windowNames), brokerVar)
var(c(3,4,5,6,7))
plot(as.Date(windowNames) ,totalVar, type ="l", ylim = range(totalVar, brokerVar, insurerVar, bankVar, hfVar))
lines(as.Date(windowNames), brokerVar)
plot(as.Date(windowNames) ,totalVar, type ="l", ylim = range(totalVar, brokerVar, insurerVar, bankVar, hfVar))
lines(as.Date(windowNames), brokerVar, c="red")
lines(as.Date(windowNames), insurerVar, c="blue")
lines(as.Date(windowNames), bankVar, c="green")
lines(as.Date(windowNames), hfVar, c="yellow")
plot(as.Date(windowNames) ,totalVar, type ="l", ylim = range(totalVar, brokerVar, insurerVar, bankVar, hfVar))
lines(as.Date(windowNames), brokerVar, c="red")
lines(as.Date(windowNames), brokerVar, color="red")
lines(as.Date(windowNames), brokerVar, col="red")
lines(as.Date(windowNames), insurerVar, col="blue")
lines(as.Date(windowNames), insurerVar, col="blue")
lines(as.Date(windowNames), bankVar, col="green")
lines(as.Date(windowNames), hfVar, col="yellow")
#granger causality simulation
startIndex <-1
lines(as.Date(windowNames), hfVar, col="purple")
plot(as.Date(windowNames) ,totalVar, type ="l",xlab='dates',  ylim = range(totalVar, brokerVar, insurerVar, bankVar, hfVar))
lines(as.Date(windowNames), brokerVar, col="red")
lines(as.Date(windowNames), insurerVar, col="blue")
lines(as.Date(windowNames), bankVar, col="green")
lines(as.Date(windowNames), hfVar, col="purple")
legend(c("total", "broker", "insurer", "bank", "hf"), col=c('black', "red", "blue", "green", "purple"))
legend("topleft", c("total", "broker", "insurer", "bank", "hf"), col=c('black', "red", "blue", "green", "purple"))
legend("topright", c("total", "broker", "insurer", "bank", "hf"), col=c('black', "red", "blue", "green", "purple"))
legend("topright", legend = c("total", "broker", "insurer", "bank", "hf"), col=c('black', "red", "blue", "green", "purple"))
legend("topright", legend = c("total", "broker", "insurer", "bank", "hf"), col=c('black', "red", "blue", "green", "purple"), lty=1:2, cex=0.8)
plot(as.Date(windowNames) ,totalVar, type ="l",xlab='dates',  ylim = range(totalVar, brokerVar, insurerVar, bankVar, hfVar))
lines(as.Date(windowNames), brokerVar, col="red")
lines(as.Date(windowNames), insurerVar, col="blue")
lines(as.Date(windowNames), bankVar, col="green")
lines(as.Date(windowNames), hfVar, col="purple")
legend("topright", legend = c("total", "broker", "insurer", "bank", "hf"), col=c('black', "red", "blue", "green", "purple"), lty=1:2, cex=0.8)
View(meanBasket)
apply(meanBasket, 1, var)
intraGroupVar <-apply(meanBasket, 1, var)
plot(intraGroupVar)
install.packages("pracma")
library('pracma')
intraGroupVar <-apply(movavg(meanBasket, 10), 1, var)
plot(movavg(intraGroupVar)
plot(movavg(intraGroupVar))
plot(movavg(intraGroupVar), type='l')
plot(intraGroupVar, type='l')
plot(intraGroupVar, type='l', lw=15)
plot(intraGroupVar, type='l', lw=5)
plot(as.Date(windowNames) ,totalVar, type ="l",xlab='dates',  ylim = range(totalVar, brokerVar, insurerVar, bankVar, hfVar))
lines(intraGroupVar, type='l', lw=5)
plot(as.Date(windowNames) ,totalVar, type ="l",xlab='dates',  ylim = range(totalVar, brokerVar, insurerVar, bankVar, hfVar, intraGroupVar))
lines(intraGroupVar, type='l', lw=5)
lines(as.Date(windowNames), intraGroupVar, type='l', lw=5)
lines(as.Date(windowNames), intraGroupVar, type='l', lw=1)
plot(intraGroupVar, type='l', lw=5)
plot(intraGroupVar, type='l', lw=1)
plot(intraGroupVar, type='l')
plot(as.Date(windowNames), intraGroupVar, type='l')
plot(as.Date(windowNames) ,totalVar, type ="l",xlab='dates',  ylim = range(totalVar, brokerVar, insurerVar, bankVar, hfVar, intraGroupVar))
lines(as.Date(windowNames), brokerVar, col="red")
lines(as.Date(windowNames), insurerVar, col="blue")
lines(as.Date(windowNames), bankVar, col="green")
lines(as.Date(windowNames), hfVar, col="purple")
legend("topright", legend = c("total", "broker", "insurer", "bank", "hf"), col=c('black', "red", "blue", "green", "purple"), lty=1:2, cex=0.8)
