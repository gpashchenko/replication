View(efficientFrame)
maxCol <-ncol(efficientFrame)
efficientFrame<-rbind(1, efficientFrame)
View(efficientFrame)
efficientFrame <-data.matrix(merged)
efficientFrame<-t(efficientFrame[, 2:ncol(efficientFrame)])
efficientFrame<-rbind(efficientFrame, 1)
y <-efficientFrame[c(i,j), 2:maxCol]
z<-efficientFrame[c(101, i,j), 1:(maxCol-1)]
y %*% t(z)
install.packages("matlib")
library(matlib)
y %*% t(z) * inv((z%*%t(z)))
y %*% t(z) %*% inv((z%*%t(z)))
y %*% t(z) %*% inv(z%*%t(z))
z%*%t(z)
y <-efficientFrame[c(i,j), 2:maxCol]
z<-efficientFrame[c(101, i,j), 1:(maxCol-1)]
maxCol <-ncol(efficientFrame)
i<-1
j<-2
y <-efficientFrame[c(i,j), 2:maxCol]
z<-efficientFrame[c(101, i,j), 1:(maxCol-1)]
efficientFrame <-data.matrix(merged)
efficientFrame<-t(efficientFrame[, 2:ncol(efficientFrame)])
efficientFrame<-rbind(efficientFrame, 1)
maxCol <-ncol(efficientFrame)
View(efficientFrame)
maxCol <-nrow(efficientFrame)
i<-1
j<-2
y <-efficientFrame[c(i,j), 2:maxCol]
z<-efficientFrame[c(101, i,j), 1:(maxCol-1)]
y %*% t(z) %*% inv(z%*%t(z))
(y %*% t(z) %*% inv(z%*%t(z)))[:, 2]
(y %*% t(z) %*% inv(z%*%t(z)))[, 2]
efficientFrame <-data.matrix(merged)
maxCols <- ncol(efficientFrame)
maxRows <-nrow(efficientFrame)
ptm <-proc.time()
ptm <-proc.time()
for (i in 2:maxCols) {
for (j in (i+1):maxCols){
grangerDF[i-1, j-1]=grangertest(efficientFrame[, i], efficientFrame[,j])
grangerDF[j-1, i-1]=grangertest(efficientFrame[,j], efficientFrame[, i])
}
}
ptm <-proc.time()
for (i in 2:maxCols) {
for (j in (i+1):maxCols){
grangerDF[i-1, j-1]=grangertest(efficientFrame[, i], efficientFrame[,j])$`Pr(>F)`[2]
grangerDF[j-1, i-1]=grangertest(efficientFrame[,j], efficientFrame[, i])$`Pr(>F)`[2]
}
}
proc.time()-ptm
View(efficientFrame)
#i<-1
#j<-2
#y <-efficientFrame[c(i,j), 2:maxCol]
#z<-efficientFrame[c(101, i,j), 1:(maxCol-1)]
#(y %*% t(z) %*% inv(z%*%t(z)))[, 2]
getGraph <- function (grangerDF) {
significance = 0.05 #change this to change significance level
nInSample  = 25 #CHANGE THIS LINE (SHOULD EQUAL NUMBER OF INSTITUTIONS IN THE GROUP)
groupVector  = vector(length = nInSample*4)
for (i in 0:(nInSample*4-1)) {
groupVector[i+1] = as.integer(i/nInSample)+1
}
mergedTemp <- (grangerDF<significance)*1 #matrix(sample(0:1, (nInSample*4)^2, replace=TRUE, prob=c(0.9,0.1)), nc=nInSample*4) #CHANGE THIS LINE FOR MY DATAFRAME
g1<-graph_from_adjacency_matrix(mergedTemp)
G_Grouped = g1
E(G_Grouped)$weight = 1
for(i in unique(groupVector)) {
GroupV = which(groupVector == i)
G_Grouped = add_edges(G_Grouped, combn(GroupV, 2), attr=list(weight=5))
}
plot.igraph(g1,  vertex.color = rainbow(4, alpha=0.4)[groupVector], layout=saveLayout, vertex.label=NA, vertex.size=5,arrow.size=0.01, arrow.width=0.1, curved=TRUE, edge.arrow.size=0.3)
legend('topleft', c('broker', 'insurer', 'bank', 'hedge fund'), lty=1, col=rainbow(4, alpha=0.4), bty='n', cex=.75, pch=15)
}
getGraph (grangerDF)
saveLayout <- LO
#set.seed(567)
LO = layout_with_fr(G_Grouped)
saveLayout <- LO
getGraph (grangerDF)
View(grangerDF)
test<-grangertest(efficientFrame[, i], efficientFrame[,j])
test<-grangertest(efficientFrame[, 1], efficientFrame[,2])
View(test)
read.csv('new/temp/graph06.csv')
read.csv('temp/graph06.csv')
getGraph((grang06))
grang06 <-read.csv('temp/graph06.csv')
getGraph((grang06))
View(grang06)
grang06 <-read.csv('temp/graph06.csv', header = TRUE)
View(grang06)
grang06 <-grang06[, 2:ncol(grang06)]
getGraph((grang06))
getFrame<-function(startIndex){
endIndex = startIndex+35
brokers_shared <- df[startIndex:endIndex, c(1,2:26)]
ins_shared <- df[startIndex:endIndex, c(1,27:51)]
banks_shared <- df[startIndex:endIndex, c(1,52:76)]
hf_shared <- df[startIndex:endIndex, c(1,77:101)]
merged <- merge(merge(merge(brokers_shared, ins_shared), banks_shared), hf_shared)
return (merged)
}
getGranger(merged){
grangerDF<-matrix(nrow=ncol(merged)-1, ncol = ncol(merged)-1) #this frame indicates whether two variables granger cause each other
efficientFrame <-data.matrix(merged)
maxCols <- ncol(efficientFrame)
maxRows <-nrow(efficientFrame)
for (i in 2:maxCols) {
for (j in (i+1):maxCols){
grangerDF[i-1, j-1]=grangertest(efficientFrame[, i], efficientFrame[,j])$`Pr(>F)`[2]
grangerDF[j-1, i-1]=grangertest(efficientFrame[,j], efficientFrame[, i])$`Pr(>F)`[2]
}
}
return (grangerDF)
}
fr<-getFrame(1)
View(df)
getFrame(1)
getFrame<-function(startIndex){
endIndex = startIndex+35
brokers_shared <- df[startIndex:endIndex, c(1,2:26)]
ins_shared <- df[startIndex:endIndex, c(1,27:51)]
banks_shared <- df[startIndex:endIndex, c(1,52:76)]
hf_shared <- df[startIndex:endIndex, c(1,77:101)]
merged <- merge(merge(merge(brokers_shared, ins_shared), banks_shared), hf_shared)
return (merged)
}
getFrame(1)
getGranger(merged){
grangerDF<-matrix(nrow=ncol(merged)-1, ncol = ncol(merged)-1) #this frame indicates whether two variables granger cause each other
efficientFrame <-data.matrix(merged)
maxCols <- ncol(efficientFrame)
maxRows <-nrow(efficientFrame)
for (i in 2:maxCols) {
for (j in (i+1):maxCols){
grangerDF[i-1, j-1]=grangertest(efficientFrame[, i], efficientFrame[,j])$`Pr(>F)`[2]
grangerDF[j-1, i-1]=grangertest(efficientFrame[,j], efficientFrame[, i])$`Pr(>F)`[2]
}
print(i)
}
return (grangerDF)
}
View(fr)
View(fr)
View(fr)
View(fr)
View(fr)
View(fr)
getGranger <-function(merged){
grangerDF<-matrix(nrow=ncol(merged)-1, ncol = ncol(merged)-1) #this frame indicates whether two variables granger cause each other
efficientFrame <-data.matrix(merged)
maxCols <- ncol(efficientFrame)
maxRows <-nrow(efficientFrame)
for (i in 2:maxCols) {
for (j in (i+1):maxCols){
grangerDF[i-1, j-1]=grangertest(efficientFrame[, i], efficientFrame[,j])$`Pr(>F)`[2]
grangerDF[j-1, i-1]=grangertest(efficientFrame[,j], efficientFrame[, i])$`Pr(>F)`[2]
}
print(i)
}
return (grangerDF)
}
fr
fr[:, 2]
fr[, 2]
garch(fr[, 2])
fr[, 2]
garch(fr[, 2], order=c(1,1))
str(fr[, 2])
summary(fr[,2])
g <- garch(fr[, 2], order=c(1,1))
g
g$fitted.values
g$fitted.values[, 1]
getGarch <- function (col) {
return(garch(col, order=c(1,1))$fitted.vales[,1])
}
apply (fr[,2:ncol(fr)], 2, getGarch)
variances <-apply (fr[,2:ncol(fr)], 2, getGarch)
getGarch(fr[:, 2])
getGarch(fr[, 2])
g<-getGarch(fr[, 2])
getGarch <- function (col) {
g<-garch(col, order=c(1,1))
return(g$fitted.vales[,1])
}
g<-getGarch(fr[, 2])
g<-grach(fr[,2], order=c(1,1))
g<-garch(fr[,2], order=c(1,1))
getGarch <- function (col) {
g<-garch(col, order=c(1,1))
return(g$fitted.values[,1])
}
g<-garch(fr[,2], order=c(1,1))
View(g)
g<-getGarch(fr[, 2])
variances <-apply (fr[,2:ncol(fr)], 2, getGarch)
View(variances)
View(fr)
View(variances)
adjFr <- fr[2:nrow(fr), 2:ncol(fr)]/variances
View(adjFr)
adjFr <- fr[2:nrow(fr), 2:ncol(fr)]/variances[2:nrow(variances), ]
View(adjFr)
getFrame<-function(startIndex){
endIndex = startIndex+35
brokers_shared <- df[startIndex:endIndex, c(1,2:26)]
ins_shared <- df[startIndex:endIndex, c(1,27:51)]
banks_shared <- df[startIndex:endIndex, c(1,52:76)]
hf_shared <- df[startIndex:endIndex, c(1,77:101)]
merged <- merge(merge(merge(brokers_shared, ins_shared), banks_shared), hf_shared)
print(1)
return (merged)
}
getGranger <-function(merged){
grangerDF<-matrix(nrow=ncol(merged)-1, ncol = ncol(merged)-1) #this frame indicates whether two variables granger cause each other
efficientFrame <-data.matrix(merged)
maxCols <- ncol(efficientFrame)
maxRows <-nrow(efficientFrame)
for (i in 2:maxCols) {
for (j in (i+1):maxCols){
grangerDF[i-1, j-1]=grangertest(efficientFrame[, i], efficientFrame[,j])$`Pr(>F)`[2]
grangerDF[j-1, i-1]=grangertest(efficientFrame[,j], efficientFrame[, i])$`Pr(>F)`[2]
}
print(i)
}
return (grangerDF)
}
getGarch <- function (col) {
g<-garch(col, order=c(1,1))
return(g$fitted.values[,1])
}
getGraph <- function (grangerDF) {
significance = 0.05 #change this to change significance level
nInSample  = 25 #CHANGE THIS LINE (SHOULD EQUAL NUMBER OF INSTITUTIONS IN THE GROUP)
groupVector  = vector(length = nInSample*4)
for (i in 0:(nInSample*4-1)) {
groupVector[i+1] = as.integer(i/nInSample)+1
}
mergedTemp <- (grangerDF<significance)*1 #matrix(sample(0:1, (nInSample*4)^2, replace=TRUE, prob=c(0.9,0.1)), nc=nInSample*4) #CHANGE THIS LINE FOR MY DATAFRAME
g1<-graph_from_adjacency_matrix(mergedTemp)
G_Grouped = g1
E(G_Grouped)$weight = 1
for(i in unique(groupVector)) {
GroupV = which(groupVector == i)
G_Grouped = add_edges(G_Grouped, combn(GroupV, 2), attr=list(weight=5))
}
plot.igraph(g1,  vertex.color = rainbow(4, alpha=0.4)[groupVector], layout=saveLayout, vertex.label=NA, vertex.size=5,arrow.size=0.01, arrow.width=0.1, curved=TRUE, edge.arrow.size=0.3)
legend('topleft', c('broker', 'insurer', 'bank', 'hedge fund'), lty=1, col=rainbow(4, alpha=0.4), bty='n', cex=.75, pch=15)
}
fr<-getFrame(1)
variances <-apply (fr[,2:ncol(fr)], 2, getGarch)
adjFr <- fr[2:nrow(fr), 2:ncol(fr)]/variances[2:nrow(variances), ]
granger<getGranger(adjFr)
getGraph(granger)
fr<-getFrame(1+36*12)
variances <-apply (fr[,2:ncol(fr)], 2, getGarch)
adjFr <- fr[2:nrow(fr), 2:ncol(fr)]/variances[2:nrow(variances), ]
granger<getGranger(adjFr)
getGraph(granger)
View(adjFr)
getGranger(adjFr)
View(efficientFrame)
View(adjFr)
getGranger <-function(merged){
grangerDF<-matrix(nrow=ncol(merged), ncol = ncol(merged)) #this frame indicates whether two variables granger cause each other
efficientFrame <-data.matrix(merged)
maxCols <- ncol(efficientFrame)
maxRows <-nrow(efficientFrame)
for (i in 2:maxCols) {
for (j in (i+1):maxCols){
grangerDF[i-1, j-1]=grangertest(efficientFrame[, i], efficientFrame[,j])$`Pr(>F)`[2]
grangerDF[j-1, i-1]=grangertest(efficientFrame[,j], efficientFrame[, i])$`Pr(>F)`[2]
}
print(i)
}
return (grangerDF)
}
getGranger(adjFr)
getGranger <-function(merged){
grangerDF<-matrix(nrow=ncol(merged), ncol = ncol(merged)) #this frame indicates whether two variables granger cause each other
efficientFrame <-data.matrix(merged)
maxCols <- ncol(efficientFrame)
maxRows <-nrow(efficientFrame)
for (i in 2:(maxCols-1)) {
for (j in (i+1):maxCols){
grangerDF[i-1, j-1]=grangertest(efficientFrame[, i], efficientFrame[,j])$`Pr(>F)`[2]
grangerDF[j-1, i-1]=grangertest(efficientFrame[,j], efficientFrame[, i])$`Pr(>F)`[2]
}
print(i)
}
return (grangerDF)
}
granger<getGranger(adjFr)
View(granger)
View(merged)
View(adjFr)
getGranger <-function(merged){
grangerDF<-matrix(nrow=ncol(merged), ncol = ncol(merged)) #this frame indicates whether two variables granger cause each other
efficientFrame <-data.matrix(merged)
maxCols <- ncol(efficientFrame)
maxRows <-nrow(efficientFrame)
for (i in 1:(maxCols-1)) {
for (j in (i+1):maxCols){
grangerDF[i, j]=grangertest(efficientFrame[, i], efficientFrame[,j])$`Pr(>F)`[2]
grangerDF[j, i]=grangertest(efficientFrame[,j], efficientFrame[, i])$`Pr(>F)`[2]
}
print(i)
}
print(grangerDF)
return (grangerDF)
}
granger<getGranger(adjFr)
grangerDF<-0
granger<getGranger(adjFr)
#granger<getGranger(adjFr)
getGranger(adjFr)
merged<-adjFr
grangerDF<-matrix(nrow=ncol(merged), ncol = ncol(merged)) #this frame indicates whether two variables granger cause each other
efficientFrame <-data.matrix(merged)
maxCols <- ncol(efficientFrame)
maxRows <-nrow(efficientFrame)
for (i in 1:(maxCols-1)) {
for (j in (i+1):maxCols){
grangerDF[i, j]=grangertest(efficientFrame[, i], efficientFrame[,j])$`Pr(>F)`[2]
grangerDF[j, i]=grangertest(efficientFrame[,j], efficientFrame[, i])$`Pr(>F)`[2]
}
print(i)
}
View(grangerDF)
granger<<-grangerDF
getGranger <-function(merged){
grangerDF<-matrix(nrow=ncol(merged), ncol = ncol(merged)) #this frame indicates whether two variables granger cause each other
efficientFrame <-data.matrix(merged)
maxCols <- ncol(efficientFrame)
maxRows <-nrow(efficientFrame)
for (i in 1:(maxCols-1)) {
for (j in (i+1):maxCols){
grangerDF[i, j]=grangertest(efficientFrame[, i], efficientFrame[,j])$`Pr(>F)`[2]
grangerDF[j, i]=grangertest(efficientFrame[,j], efficientFrame[, i])$`Pr(>F)`[2]
}
print(i)
}
granger<<-grangerDF
}
#granger<getGranger(adjFr)
getGranger(adjFr)
getGraph(granger)
plot()
plot(c(1:100), c(2:101))
fr<-getFrame(1)
variances <-apply (fr[,2:ncol(fr)], 2, getGarch)
adjFr <- fr[2:nrow(fr), 2:ncol(fr)]/variances[2:nrow(variances), ]
merged<-adjFr
granger<getGranger(adjFr)
getGraph(granger)
fr<-getFrame(1+36*12)
variances <-apply (fr[,2:ncol(fr)], 2, getGarch)
adjFr <- fr[2:nrow(fr), 2:ncol(fr)]/variances[2:nrow(variances), ]
merged<-adjFr
#granger<getGranger(adjFr)
getGranger(adjFr)
getGraph(granger)
View(fr)
View(brokers_shared)
getGranger <-function(merged){
grangerDF<-matrix(nrow=ncol(merged), ncol = ncol(merged)) #this frame indicates whether two variables granger cause each other
efficientFrame <-data.matrix(merged)
maxCols <- ncol(efficientFrame)
maxRows <-nrow(efficientFrame)
for (i in 1:(maxCols-1)) {
for (j in (i+1):maxCols){
grangerDF[i, j]=grangertest(efficientFrame[, i], efficientFrame[,j], order = 3)$`Pr(>F)`[2]
grangerDF[j, i]=grangertest(efficientFrame[,j], efficientFrame[, i], order = 3)$`Pr(>F)`[2]
}
print(i)
}
granger<<-grangerDF
}
plot(c(1:100), c(2:101))
fr<-getFrame(1)
variances <-apply (fr[,2:ncol(fr)], 2, getGarch)
adjFr <- fr[2:nrow(fr), 2:ncol(fr)]/variances[2:nrow(variances), ]
merged<-adjFr
granger<getGranger(adjFr)
getGraph(granger)
fr<-getFrame(1+36*12)
variances <-apply (fr[,2:ncol(fr)], 2, getGarch)
adjFr <- fr[2:nrow(fr), 2:ncol(fr)]/variances[2:nrow(variances), ]
merged<-adjFr
#granger<getGranger(adjFr)
getGranger(adjFr)
getGraph(granger)
seq(1,252,4)
res <- c()
for (i in seq(1, 252, 7)) {
res <- c(res, list(i=i))
}
res
View(res)
res <- c()
for (i in seq(1, 252, 7)) {
res <- c(res, i=i)
}
res
df[, 1]
res <- c()
for (i in seq(1, 252, 7)) {
res[[df[i,1]]] = c([df[i,1]], i)
}
for (i in seq(1, 252, 7)) {
res[[df[i,1]]] = c(df[i,1]], i)
}
res <- c()
for (i in seq(1, 252, 7)) {
res[[df[i,1]]] = c(df[[i,1]], i)
}
View(res)
res <- c()
res <- c()
for (i in seq(1, 252, 7)) {
res[[df[i,1]]] = c(df[[i,1]], i)
}
res <- c()
for (i in seq(1, 252, 7)) {
res[[i]] = c(res[[i]], i)
}
res <- c()
for (i in seq(1, 252, 7)) {
res[["a"]] = c(res[["a"]], i)
}
res <- list()
for (i in seq(1, 252, 7)) {
res[["a"]] = c(res[["a"]], i)
}
View(res)
res <- list()
for (i in seq(1, 252, 7)) {
res[[df[i, 1]]] = c(res[[df[i,1]]], i)
}
length(df)
View(df)
res <- list()
for (i in seq(1, 252, 7)) {
index = 1+36*(i-1)
res[[df[index, 1]]] = c(res[[df[index,1]]], i)
}
dres <c()
res <- c()
for (i in seq(1, 252, 7)) {
index = 1+36*(i-1)
dates <-c(dates, df[index, 1])
res<-c(res, i)
}
dres <c()
res <- c()
for (i in seq(1, 252, 7)) {
index = 1+36*(i-1)
dres <-c(dates, df[index, 1])
res<-c(res, i)
}
dres <c()
res <- c()
for (i in seq(1, 252, 7)) {
index = 1+36*(i-1)
dres <-c(dres, df[index, 1])
res<-c(res, i)
}
dres <c()
res <- c()
dres <-c(dres, df[index, 1])
dres <c()
dres <-c()
res <- c()
for (i in seq(1, 252, 7)) {
index = 1+36*(i-1)
dres <-c(dres, df[index, 1])
res<-c(res, i)
}
plot(dres, res)
plot(as.Date(dres), res)
granger
sum(granger)
sum(granger<0.05, na.rm=TRUE)
sum(granger<0.05, na.rm=TRUE)/4950
dres <-c()
res <- c()
for (i in seq(1, 252, 7)) {
index = 1+36*(i-1)
dres <-c(dres, df[index, 1])
fr<-getFrame(i)
variances <-apply (fr[,2:ncol(fr)], 2, getGarch)
adjFr <- fr[2:nrow(fr), 2:ncol(fr)]/variances[2:nrow(variances), ]
merged<-adjFr
getGranger(adjFr)
res<-c(res, sum(granger<0.05, na.rm=TRUE)/4950)
print(sum(granger<0.05, na.rm=TRUE)/4950 )
print(i)
}
res
length(res)
plot(as.Date(dres), res)
dres
length(dres)
length(res)
plot(as.Date(dres[1:length(dres)-1]), res)
